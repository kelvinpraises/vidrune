type VideoMetadata = 
 record {
   audioTranscript: opt text;
   captions: opt text;
   description: text;
   fileKey: text;
   id: text;
   title: text;
   uploadTime: int;
   uploader: Principal;
 };
type Result_2 = 
 variant {
   err: text;
   ok: bool;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Principal = principal;
service : {
  canUpload: () -> (Result_2);
  getStats: () ->
   (record {
      testnetGiftAmount: nat;
      totalVideos: nat;
      uploadCost: nat;
    }) query;
  getTestnetTokens: () -> (Result);
  getTokenBalance: () -> (Result_1);
  getVITokenCanisterId: () -> (opt Principal) query;
  getVideoMetadata: (videoId: text) -> (opt VideoMetadata) query;
  getVideosByUploader: (uploader: Principal, limit: nat) ->
   (vec VideoMetadata) query;
  listVideos: (limit: nat, offset: nat) -> (vec VideoMetadata) query;
  setVITokenCanister: (canisterId: Principal) -> (Result);
  storeVideoMetadata: (title: text, description: text, fileKey: text,
   captions: opt text, audioTranscript: opt text) -> (Result);
}
